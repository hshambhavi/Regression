WEBVTT

1
00:01:32.640 --> 00:01:33.690
Hey, hi jack

2
00:02:00.990 --> 00:02:02.160
Jack. Can you hear us.

3
00:02:06.060 --> 00:02:20.520
Okay. Sounds good. I thought we just have a quick sync up so that we can sort of give you a quick update on where we are now. We already reviewed the approach with you at a high level. Last time, but we just wanted to sort of circle back and tell you where we are and

4
00:02:21.540 --> 00:02:36.690
We also discuss about the API that we sort of needed agnostics we wanted to quickly cover that and then also talk about some metrics that we will use to cover sort of before and after.

5
00:02:37.770 --> 00:02:38.670
This initiative.

6
00:02:38.820 --> 00:02:40.560
To ensure that we are measuring the right

7
00:02:41.190 --> 00:02:44.130
Things to ensure our success criteria is sort

8
00:02:44.130 --> 00:02:45.210
Of been defined

9
00:02:45.720 --> 00:02:49.260
So those are the main items that you wanted to cover basically

10
00:02:51.960 --> 00:02:54.090
Okay, let's do it. Okay.

11
00:02:54.450 --> 00:02:55.860
So turn you want to start with.

12
00:02:56.400 --> 00:02:56.940
I give

13
00:02:57.750 --> 00:02:58.440
Like a quick

14
00:02:59.070 --> 00:03:00.270
Heads up on where we are.

15
00:03:00.300 --> 00:03:00.690
So that

16
00:03:00.780 --> 00:03:01.620
Just so that it

17
00:03:01.980 --> 00:03:06.240
can refresh our memory on the books and things we talked about previously.

18
00:03:07.440 --> 00:03:14.340
Yeah, that would be appreciated the conversations are far and few between two on i don't i don't remember every 10 right

19
00:03:15.660 --> 00:03:16.890
Right, right. So,

20
00:03:17.250 --> 00:03:17.670
This time

21
00:03:22.680 --> 00:03:27.660
I'm in. I can't hear you. Property jack. Can you hear

22
00:03:29.250 --> 00:03:29.910
Us. Okay.

23
00:03:33.420 --> 00:03:33.870
Yeah, go ahead.

24
00:03:34.920 --> 00:03:38.940
Get started like we can quickly review though workflow that we discussed

25
00:03:40.230 --> 00:03:45.360
On the show. So let me just quickly share my screen and get started.

26
00:03:53.580 --> 00:03:54.330
Can you see my screen.

27
00:03:57.180 --> 00:03:57.480
Okay.

28
00:03:58.380 --> 00:04:19.140
Ah, so I think last time we are with data or give you overview, but I'll just quickly go through over it and the components that we have done and what we are working on right now. So on a high level. There'll be there'll be two components one one component will be on on

29
00:04:19.860 --> 00:04:23.040
That is the model and gives you the API, give us

30
00:04:23.130 --> 00:04:39.990
Gives us the API, which the second component will call that is that is the one that does the actual D hibernation call right so this one component model built. So we are close on this one. So we have created

31
00:04:42.210 --> 00:04:51.450
A model on our side, we still need to expose these things by aka so we are building we're working on that. So all this part where we

32
00:04:51.750 --> 00:05:00.600
Initialize we do the data collection, where we do data cleaning and then apply algorithm. So these three all the sport part is done.

33
00:05:01.260 --> 00:05:15.330
We are still working on on the fourth part that is was the model is beginning to save it. Some on some persistent storage so that we can reuse it later when the, the actual queries will be coming

34
00:05:17.430 --> 00:05:33.030
So while doing all these we are using plank as the data source and from where we are trying to get the F5 access logs and then using that spatial URL. The you up, up, down, down, left, right, left right thing

35
00:05:34.320 --> 00:05:36.180
To identify the users.

36
00:05:38.610 --> 00:05:43.950
Request pattern. So yeah, so all this part is done.

37
00:05:46.020 --> 00:05:58.650
Yeah, we are also sort of in the code review process of the siding windows code. So it's code dev complete but we need to push it and then. Yeah. So, these all parts are done.

38
00:05:59.760 --> 00:06:10.470
From the second point where we need to save the model and then to use it later on later point of view. So this part we are working on and we are using our DC

39
00:06:11.250 --> 00:06:27.420
Data Center as a persistent storage where we keep this model in a table. So yeah, like this. You don't need to know, but you're just telling you, from the perspective that you know where exactly we are saving money this this model is computed

40
00:06:29.010 --> 00:06:35.160
The second part is the workflow based part of where we we will have

41
00:06:36.450 --> 00:06:53.100
So this, this part is the actual part that that called this API. So once the model is saved when API will be exposed from our service that this part will use. So this part will lie on the data center. This part is on a different VM and

42
00:06:54.210 --> 00:06:55.350
Yeah, this part is separate.

43
00:06:57.000 --> 00:07:04.350
So on this part of our life, we are working on the workflow, it is still a work in progress. So

44
00:07:05.460 --> 00:07:18.060
We have a skeleton reading, but I think we we need this part from you, where we need to check as a pre flight check whether we should start the instance or not on the instances sign

45
00:07:23.220 --> 00:07:28.500
So we can provide you with an API to do that. Yeah. You can't heal from XML stuff.

46
00:07:29.820 --> 00:07:32.820
We can tell from Accenture you cannot

47
00:07:33.780 --> 00:07:35.340
We cannot give up.

48
00:07:35.700 --> 00:07:39.150
So anything and discarded, then we cannot know

49
00:07:39.660 --> 00:07:47.640
So I think we should close on the APA ask this week, like what is the request and response format, just so that

50
00:07:48.270 --> 00:07:51.210
It is Korean from them and from us for the interface.

51
00:07:51.930 --> 00:07:59.520
And then they can right jack can tell us when it will be sort of done. So let's get that wrapped up this week from the requirement for special holiday.

52
00:08:00.630 --> 00:08:04.380
We actually have one already.

53
00:08:08.880 --> 00:08:09.330
Takes

54
00:08:09.390 --> 00:08:10.860
A lot of late.

55
00:08:11.700 --> 00:08:17.910
Nights. Are you you get your requirements and then I'll see what we have available. And then we may need to do some incremental

56
00:08:19.800 --> 00:08:20.940
Changes to

57
00:08:24.690 --> 00:08:29.160
Get to work. So yeah, put together your requirements, send it over to me and then I'll take a look at what we have

58
00:08:30.420 --> 00:08:33.300
Okay, so I will send, send this information right away after

59
00:08:33.300 --> 00:08:33.870
This meeting.

60
00:08:35.070 --> 00:08:36.090
Like, I know what I

61
00:08:36.330 --> 00:08:36.930
Mean and

62
00:08:39.540 --> 00:08:44.130
I'll give you this interface. What we are expecting all you have. We can decide on the interface.

63
00:08:46.140 --> 00:08:56.220
Okay, so then the second part comes so this part, we have changed slightly from what we have discussed previously, so because these this part requires

64
00:08:56.820 --> 00:09:04.230
Continuous pooling once you. So let's say you have two instances that actually came up on the wane one server single server.

65
00:09:04.680 --> 00:09:10.320
And we try to wake up the instance. So as we discussed the last time it makes sense.

66
00:09:11.070 --> 00:09:19.800
Not start multiple instances right at one at once. Right. So for that we need a polling mechanism that needs to sort of find whether the

67
00:09:20.100 --> 00:09:30.570
Instances on and then trigger the second request that came so it will be like three to five minutes of the pooling and then only will the data will be done.

68
00:09:32.250 --> 00:09:33.090
For this we

69
00:09:33.120 --> 00:09:34.440
Have to change my model.

70
00:09:34.470 --> 00:09:43.410
So this has to go out and this will make make our process a little bit complicated, but more robust and more

71
00:09:45.420 --> 00:09:47.280
more friendly to data center.

72
00:09:49.020 --> 00:09:55.830
Yeah, in self service now instance so that we don't bring down the service now instance or put high load unnecessarily.

73
00:09:56.280 --> 00:09:56.700
Because

74
00:09:56.790 --> 00:09:57.240
We have to

75
00:09:57.600 --> 00:10:02.820
We have to sort of keep the process dizzy. While we are checking with the other instances upon not

76
00:10:04.830 --> 00:10:17.040
Me. I think this part is something that we are still working on. So I think we have changed the approach here, we will not, we will be calling it from a different place. It will be doing the same thing. But yeah, from a different point of view.

77
00:10:19.140 --> 00:10:20.190
So on this one.

78
00:10:22.050 --> 00:10:33.390
So we so to get your point of view. So, is this okay to start to elicit instances at once like a limited number of instances in a parallel

79
00:10:33.990 --> 00:10:48.360
Because I'm sure like if you try to find all the instances that you have it will be CPU bust like spike, you will be there. But is it okay to fire at least like because while we are holding, we would need this information so

80
00:10:50.550 --> 00:10:59.340
So, let's say, what happens is if you have five is isn't away one post it, and it takes around three to five minutes. Let's say for for average it will take us

81
00:10:59.670 --> 00:11:11.250
I think for into for like 16 minutes and at the very least, to completely start all instances that we have. We had a question on that server, right, that

82
00:11:11.730 --> 00:11:12.510
Syria later.

83
00:11:13.530 --> 00:11:21.300
Yeah, that that if we do see really. So is there a sort of parallelism that we can have, or is it always Syrian like what would be your

84
00:11:21.990 --> 00:11:22.290
Take on

85
00:11:24.090 --> 00:11:37.980
Marriage some number of instances you can wake up at the same time, I think we'll need to play around and monitor the CPU on the, the, how many differently because that's not something we normally do, because we don't batch wake up instances.

86
00:11:39.180 --> 00:11:46.410
I don't have an answer for you right now. But I think when you get to a point where you can kind of adjust that as a variable. We can sit down together and see what we can do.

87
00:11:47.460 --> 00:11:47.760
Okay.

88
00:11:48.180 --> 00:11:57.990
So I think while coding or we need. We don't definitely need to don't need to take the serial thing we need to take some number and limit the CD like concurrency based on that number.

89
00:12:03.480 --> 00:12:04.440
We can, yeah.

90
00:12:04.890 --> 00:12:15.840
We just make it to configure parameters. So like he's saying that when we tweak it, we should be able to do it without much without any coaching, so we can just set the parameter to

91
00:12:15.840 --> 00:12:18.840
Max two parallel instances, so that way.

92
00:12:18.840 --> 00:12:20.910
If it's a then we didn't have

93
00:12:22.170 --> 00:12:23.490
Sort of four batches, so

94
00:12:24.630 --> 00:12:25.440
So we should make

95
00:12:25.470 --> 00:12:39.510
A draft. So once once we get to the point where we can test those we can go ahead and start a, you know, to then go to for then go to eight and then see how the resources on the box are responding. If we see the CPU. Hi, go up to heaven will stop.

96
00:12:41.910 --> 00:12:42.180
Okay.

97
00:12:42.510 --> 00:13:00.180
So one other question that I have here. Do you guys tested directly, like how do you test your things. Do we have a separate environment where you have multiple developer instances or you directly tends to your. Let's say you have your own code some some code, right. So how do you

98
00:13:00.720 --> 00:13:12.510
Lead the way we work is we have a few sub prod environment. So we have like dev Portal. Portal beta. And then within those environments. We have a number of test instances available as well.

99
00:13:13.350 --> 00:13:20.520
Better capable of hiring. So we have instances like dev test 123 and test four or five, six and stuff like that.

100
00:13:22.500 --> 00:13:22.980
So when

101
00:13:23.040 --> 00:13:28.350
You when you are ready to do some testing, we can work with you to get an environment setup.

102
00:13:30.780 --> 00:13:37.950
Is it in my mind linked with data center test or is it directly linked to the data center product or death, like the VM.

103
00:13:41.010 --> 00:13:41.220
So,

104
00:13:43.170 --> 00:13:47.850
Data Center prod sometimes we talked to DC to us, but most of the time we talked to Casey prod

105
00:13:50.010 --> 00:14:06.960
Because fit for our development, all these workflows and everything. We have to be sort of test ready and at least like all sanity, at least we should do one testing one round of testing before we move from test to prod segment.

106
00:14:08.700 --> 00:14:19.350
And the reason that we are not pointing to data center, Deb, is we're not testing out data centers def code we're testing hard code. And so we need the CMT be to be accurate.

107
00:14:21.030 --> 00:14:26.220
And so we test against the production data center, but not

108
00:14:28.710 --> 00:14:30.210
But we cannot the point with decent that

109
00:14:30.390 --> 00:14:36.180
Makes sense. And then since you're also making calls into us. It doesn't really matter where you're making them from right

110
00:14:37.920 --> 00:14:39.060
As long as the MD.

111
00:14:39.390 --> 00:14:41.580
Populated for them.

112
00:14:41.640 --> 00:14:53.730
Doesn't it doesn't have the developer instances, I would have found is, it doesn't have data center. I think one or two data also not operational so I'm not sure.

113
00:14:54.780 --> 00:14:59.550
Why we don't need he does, but he can get populated with some dev instances we can certainly

114
00:15:01.260 --> 00:15:03.180
Look, so I'll take action on me, too.

115
00:15:19.980 --> 00:15:20.640
Instances.

116
00:15:21.750 --> 00:15:28.650
You know, think it's fine anything, then we don't need you to do anything that we can just test on our own.

117
00:15:34.770 --> 00:15:40.020
And whom whom should I reach out for the dev instances like is there a specific group that you

118
00:15:41.730 --> 00:15:42.570
Work with or

119
00:15:44.730 --> 00:15:45.360
What do you mean

120
00:15:47.130 --> 00:15:55.230
Like if I want to provision some developer instances in data center like I would need a host in the lab.

121
00:15:56.610 --> 00:16:01.740
New ones you can just import the existing ones just coordinate with me and for off on my team.

122
00:16:03.120 --> 00:16:03.480
OK.

123
00:16:04.980 --> 00:16:05.220
OK.

124
00:16:19.380 --> 00:16:24.720
Once we are, we're in the testing phase i'll i'll ping you and get the second done

125
00:16:26.280 --> 00:16:29.340
Okay, I think we can close this one you're not using this

126
00:16:30.930 --> 00:16:35.520
Yeah, to give you the final answer on how we are using it. We are using

127
00:16:36.810 --> 00:16:48.690
So there are two end points. One is the one that you use you you de de la la la da and there is another one activate my instance don't do so we will be using that bit ministers to do

128
00:16:49.980 --> 00:16:49.980
I'm

129
00:16:51.120 --> 00:16:52.560
Just to give you the information

130
00:16:54.420 --> 00:16:59.640
Activate my instant do on on the sleeping instance itself.

131
00:17:00.510 --> 00:17:00.870
Right.

132
00:17:02.160 --> 00:17:03.660
Because I'm in

133
00:17:04.650 --> 00:17:08.340
A trusted IP zone. So we'll, we'll be able to make that call.

134
00:17:12.750 --> 00:17:15.990
Okay, so, and I think this this will

135
00:17:17.850 --> 00:17:20.610
I think this is the progress and where are we at

136
00:17:21.900 --> 00:17:26.550
From our point of view, the final thing I think we did discuss

137
00:17:27.660 --> 00:17:42.420
Last time, but I think I'm so here I'm not sure if I can read it last time, but I would like to convey it again. So the instances. And so this this whole process does not include

138
00:17:46.170 --> 00:17:57.660
So it's, it's basically based on the status of the user that what he has done. But I tried. Now, we are not including if they users come on weekend or like those patterns are not yet.

139
00:17:59.730 --> 00:18:09.570
We are not covering those patterns. So what does that mean is so let's say if he if a user has started his instance at a given given our

140
00:18:10.290 --> 00:18:24.810
For a high number of time in previous last 30 days, then we will start the instance on will try to start the instance. So that means they will be chance of there will be times when the user is

141
00:18:25.890 --> 00:18:29.850
Leave aside the instance and user will not come. So it sort of false

142
00:18:31.590 --> 00:18:37.560
It's not a, not a harm for the UX, but it's just not very optimized because

143
00:18:37.770 --> 00:18:38.190
We're not in

144
00:18:39.480 --> 00:18:40.560
Our perspective, right.

145
00:18:42.690 --> 00:18:45.960
Right, right. I'm just trying to like convey that to you like that that will be there.

146
00:18:47.190 --> 00:18:47.460
Yeah.

147
00:18:48.840 --> 00:19:04.710
Yeah, and I think because we'd start initially with a smaller set during that should be fine. And as we grow. We will try to tweak our model to take those things also in congress consideration that when we go on a higher number will not have that problem of

148
00:19:05.250 --> 00:19:06.210
Consuming height.

149
00:19:06.570 --> 00:19:08.250
I amount of resources.

150
00:19:10.680 --> 00:19:11.340
So,

151
00:19:11.400 --> 00:19:13.200
Due to major success that if

152
00:19:13.230 --> 00:19:13.650
We will

153
00:19:13.680 --> 00:19:17.940
We cannot take that criteria for example if I started three let's say

154
00:19:20.070 --> 00:19:24.420
And how many times you will came and I started instance so that

155
00:19:24.900 --> 00:19:26.670
So I think to discuss the

156
00:19:26.760 --> 00:19:31.380
Criteria or measurement of how well we're doing it, it

157
00:19:33.180 --> 00:19:34.950
So yeah, I mean like it to come to

158
00:19:34.950 --> 00:19:44.190
That how it's just the time when user came and this instance was started that. That's what that that will be counted right so

159
00:19:47.610 --> 00:19:48.330
Just a quick

160
00:19:48.570 --> 00:19:49.830
Yeah. And I guess the question is

161
00:19:50.100 --> 00:19:52.110
Is there a way to measure the average

162
00:19:52.140 --> 00:20:00.450
Waiting Time for a user so that we should be able to see if you're reducing that because that is ultimately the user experience being improved.

163
00:20:02.700 --> 00:20:13.890
Um, so we do we have we loosely keep track of how long a wake up operation takes place in the sense that we create a request record and then we updated once it's complete.

164
00:20:15.090 --> 00:20:19.770
And so we have the data, but we haven't really crunched it to determine the durations.

165
00:20:22.080 --> 00:20:24.090
Have you guys ever worked with big data before

166
00:20:27.690 --> 00:20:27.930
No.

167
00:20:28.230 --> 00:20:34.560
Not really. But yeah, our PR teams or do some work on that. So we can get access to that data so gorgeous data.

168
00:20:35.430 --> 00:20:43.410
Yeah, yeah. Because what I was gonna say is the other option that you can do is big data actually has session information on each instance

169
00:20:45.240 --> 00:21:02.370
And so if you if you are able to basically wake up an instance and then determine that. And this is a more precise way and maybe this precision is not needed. But if you can wake up an instance it's service now.net I believe

170
00:21:03.390 --> 00:21:06.600
Or maybe not. I don't, I don't remember actually.

171
00:21:07.650 --> 00:21:08.490
Search them.

172
00:21:13.260 --> 00:21:14.520
Because, you know,

173
00:21:16.350 --> 00:21:25.680
Hypothetically, the most accurate measure of your success would be you wake up an instance. And then you see sessions appear on it within some time duration. Right.

174
00:21:28.500 --> 00:21:38.700
And then that that would be like indisputable be the reason that I'm saying, you know, and it's it's probably okay to do more generalized data to but if you do

175
00:21:39.060 --> 00:21:48.900
For example, the number of manually initiated wake ups. There are some things that will influence that including the number of users that are active.

176
00:21:49.530 --> 00:21:56.850
You know the number when a release just came out. So we see more activity when new releases come out when holidays come around, you know, we'll see a decrease

177
00:21:57.300 --> 00:22:07.470
And so if you wanted to really get down to core value. It's that when you wake up an instance within two to three hours you see sessions populate on that instance right

178
00:22:08.850 --> 00:22:11.700
And that that can definitively tell you

179
00:22:12.930 --> 00:22:17.640
Hey, you actually save this person from having to manually initiate a wake up.

180
00:22:20.880 --> 00:22:21.780
Call make sense.

181
00:22:22.410 --> 00:22:27.630
So the reducing the time between wake up in the sessions. That's like a measure of our success rate.

182
00:22:28.710 --> 00:22:32.340
No, no. So if you if you guys are successful, there will be no wait time

183
00:22:34.530 --> 00:22:34.830
Okay.

184
00:22:35.910 --> 00:22:44.490
If you guys if your model works perfectly, someone will come to their instance and it will be already awake and we won't even see the wake up request.

185
00:22:45.630 --> 00:22:57.000
What do we have to have to eliminate the cases what he just said, right, because if I hypothetically, if I keep all the instances active all the time that could still happen right but we want to

186
00:22:58.590 --> 00:23:03.090
Only factor in cases where we actually woke it up and the user came right so

187
00:23:03.600 --> 00:23:04.140
Yeah yeah

188
00:23:04.230 --> 00:23:17.940
Yeah, you're absolutely right, that's you know that's an extreme end of gaming it and ultimately that would be the best experience for our customers, right, if we just have all the instances awake all the time. But we're not able to do that, due to resource constraints and so

189
00:23:19.470 --> 00:23:24.780
Knowing that we wake up the instance and that a user uses it is probably the next best thing.

190
00:23:27.120 --> 00:23:36.420
Yeah. And then what we definitely need to exercising. I will add task, but what we can do to get the other lists. So if we

191
00:23:36.900 --> 00:23:46.440
Were to suggest to make this clear. So if we were to get this as we can attract men sense part we started and then we can start the process after three hours. Let's say that's our window.

192
00:23:46.830 --> 00:24:02.790
And we can check how many is if if there is any login on that instance from f5 access logs and if there is any login within that three are. That means we assume that it's a it's a success, right.

193
00:24:04.170 --> 00:24:10.830
Yeah, that's a good idea. If you can, if you already have access to five or spunk logs, then you don't even need big data.

194
00:24:12.570 --> 00:24:13.230
That's a good idea.

195
00:24:15.360 --> 00:24:15.600
Okay.

196
00:24:16.440 --> 00:24:17.670
Yeah, I think that the

197
00:24:18.840 --> 00:24:19.950
Money that will open.

198
00:24:20.550 --> 00:24:27.270
Yeah, so I think what we need is we need like the baseline first so like what it is now at least for the selection criteria.

199
00:24:28.050 --> 00:24:40.800
So that we have like a of course that this might change a time. But let's say we average it out over 30 days and then so that's like our current state. So then as we sort of implement this, we should see like a

200
00:24:41.460 --> 00:24:42.570
Change in that stat.

201
00:24:42.570 --> 00:24:43.920
Right. So that's how we measure

202
00:24:45.090 --> 00:24:45.690
Enrollment

203
00:24:46.770 --> 00:24:48.630
On the state level out the

204
00:24:48.720 --> 00:24:48.960
Right.

205
00:24:50.220 --> 00:24:55.380
Yeah, like we need like a start state. And then as we change Rosie make

206
00:24:55.440 --> 00:24:56.760
Smarter to motivate impacting

207
00:24:58.200 --> 00:25:04.860
Yeah, I mean, I can tell you how many we can give you reports on how many wake ups are created over any period of time.

208
00:25:09.150 --> 00:25:09.360
But

209
00:25:11.010 --> 00:25:12.210
I need somewhere here.

210
00:25:14.790 --> 00:25:15.210
Show.

211
00:25:15.300 --> 00:25:20.640
The number of instances that are awake and and hibernating so that's not particularly useful.

212
00:25:21.990 --> 00:25:28.560
What you care about is, is how many people are submitting wake up requests no longer needs to do that right

213
00:25:31.980 --> 00:25:33.990
And we should probably filter that with the

214
00:25:35.250 --> 00:25:39.690
Incentives or the group of instances where we care about it but

215
00:25:40.320 --> 00:25:41.160
Yeah, then

216
00:25:41.580 --> 00:25:43.230
We'll only cared for that or like

217
00:25:43.620 --> 00:25:43.830
What

218
00:25:43.920 --> 00:25:45.630
We need to be right.

219
00:25:46.050 --> 00:25:49.260
So from the day. So how can you give us that information jacket.

220
00:25:49.260 --> 00:25:50.580
Did like some dashboard or is

221
00:25:50.580 --> 00:25:52.290
That like a reporter

222
00:25:53.430 --> 00:25:59.550
We can provide you with the report, you would need to tell us what the, what the filtering criteria for the instances are

223
00:26:01.140 --> 00:26:02.640
And we can tell you how many wake up.

224
00:26:02.640 --> 00:26:05.460
Request for that set of instance over some period of time.

225
00:26:06.840 --> 00:26:13.650
Actually ln we can get that information directly to be doing. You need Jack's support that because

226
00:26:13.710 --> 00:26:14.340
I feel

227
00:26:14.760 --> 00:26:16.560
That if you ever regretted. That's fine.

228
00:26:17.610 --> 00:26:29.910
Yeah so access logs can use all that information and for the stuff that we start the that thing. We can also really love it anyways right we'll, we'll put that somewhere.

229
00:26:30.360 --> 00:26:33.450
Yeah, I'm just starting with the current situation.

230
00:26:34.140 --> 00:26:40.620
Oh no, without any intervention. What is the current situation of number of backups per day or per vehicle for

231
00:26:41.730 --> 00:26:42.300
The baseline.

232
00:26:44.070 --> 00:26:54.840
Okay, we can we can send that filter right here to jack. So we'll discuss it offline and see if we can send us it for like a week or a month sort of Peter then give us some idea.

233
00:26:55.980 --> 00:27:01.350
Yeah, I'll send you some data and then you can refine it and tell me what you need and don't need. Okay.

234
00:27:01.980 --> 00:27:02.490
Sounds good.

235
00:27:03.240 --> 00:27:05.640
Okay. Okay, so

236
00:27:08.100 --> 00:27:10.080
Getting in on a Monday.

237
00:27:10.440 --> 00:27:17.160
Yeah, I think what we'll also do is in terms of some dates and things like that and share that

238
00:27:17.670 --> 00:27:23.640
Data early next week because we're just wrapping up one of the design citizen. So we'll be able to share some dates, where

239
00:27:24.060 --> 00:27:37.080
We need some bandwidth from your side to support the testing and you know if any changes are needed and also we once we figured out the API signature and stuff you'll probably have some you may or may not have some

240
00:27:38.100 --> 00:27:41.970
We need some dates on that. So we figure out all the

241
00:27:43.500 --> 00:27:46.800
implementation details. I want to share our dates next week.

242
00:27:48.990 --> 00:27:56.790
Okay. Sounds good. And yeah, if you can give me as much advanced notice as possible so that I can schedule any API work that we need to do to support us.

243
00:27:58.680 --> 00:28:06.480
Right, right. Surely I will try to will send a signature and get that finalized this week. So then we can, we cannot have when that will all fall so

244
00:28:12.540 --> 00:28:22.830
Okay. Sounds good. I can, I think we can set up like oh maybe once we figure out the details like a recurring consent to we sort of sync up just to make sure we are on track and

245
00:28:24.210 --> 00:28:28.530
Clarification could be a quick 15 minutes call. But yeah, just to make sure we are aligned

246
00:28:28.740 --> 00:28:33.990
Yeah, that's fine. Just put on the calendar and then I'm happy to do it. Okay. Sounds good.

247
00:28:36.690 --> 00:28:37.650
Okay. Thank you both.

248
00:28:38.220 --> 00:28:38.940
Good evening.

249
00:28:40.350 --> 00:28:40.650
Bye.

250
00:28:41.730 --> 00:28:42.000
Bye.

